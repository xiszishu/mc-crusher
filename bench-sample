#!/usr/bin/perl
# public domain
# benchmark sampler by dormando.

use warnings;
use strict;
use IO::Socket::INET;
use IO::Socket::UNIX;
use Time::HiRes;

$|++;
my $host        = shift @ARGV;
my $MAX_RUNS    = shift @ARGV;
my $SAMPLE_TIME = shift @ARGV || 2;
my @TO_SAMPLE   = @ARGV;
unless (@TO_SAMPLE) {
    @TO_SAMPLE = ('cmd_get');
}
my $longest = 0;
for (@TO_SAMPLE) {
    $longest = length($_) if length($_) > $longest;
}
$longest++;

my $s = connect_to($host);
die $@ unless $s;

my %avgs = ();
my $runs = 0;

while (1) {
    sample();
    last if ($MAX_RUNS == -1 ||
        ($MAX_RUNS != 0 && $runs == $MAX_RUNS));
}

sub sample {
    my $one      = mc_info($s);
    my $one_time = Time::HiRes::time;

    sleep $SAMPLE_TIME;

    my $two      = mc_info($s);
    my $two_time = Time::HiRes::time;

    my $elapsed = $two_time - $one_time;
    $runs++;

    for my $stat (@TO_SAMPLE) {
        my $per_sec = ($two->{$stat} - $one->{$stat}) / $elapsed;
        if (!$avgs{$stat}) {
            $avgs{$stat} = $per_sec;
        } else {
            $avgs{$stat} += $per_sec;
        }
        printf "%-${longest}s avg/s (%2s/s sample): %-20s [%s]\n", $stat,
        $SAMPLE_TIME, $per_sec, $avgs{$stat} / $runs;
    }
}

sub mc_info {
    my $s = shift;
    print $s "stats\r\n";
    my %stats = ();
    while (my $line = <$s>) {
        last if $line =~ m/^END/;
        if ($line =~ m/^STAT (\S+) (\d+)/) {
            $stats{$1} = $2;
        }
    }
    return \%stats;
}

sub connect_to {
    return IO::Socket::UNIX->new(Type => SOCK_STREAM(), Peer => $_[0]);
}
